using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace Saper_1_0
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private Random random = new Random();
        private int[,] matricks;
        private int[,] mineMatricks;
        private Button[,] buttons;
        private bool isFlag;
        private int SHeight;
        private int SWidth;
        int mines;
        bool gameIsLose;
        public MainWindow()
        {
           
            
           
            
            InitializeComponent();
            
            SHeight = 15;
            SWidth = 15;
            mines = 20;
            Window.Window.Height = SHeight * 60 + 60;
            Window.Window.Width = SWidth * 60;
            mainGrid.Height = Window.Height - 60;
            buttons = new Button[SHeight, SWidth];
            SetMatricks();
            for (int i = 0; i < SHeight; i++)
            {
                mainGrid.ColumnDefinitions.Add(new ColumnDefinition());
            }
            for (int j = 0; j < SWidth; j++)
            {
                mainGrid.RowDefinitions.Add(new RowDefinition());
            }
            for (int i = 0; i < SHeight; i++)
            {
                for (int j = 0; j <SWidth; j++)
                {
                    Button a = new Button();
                    a.Click += A_Click;
                    a.FontSize = 30;
                    a.Background = new SolidColorBrush(Colors.LightSkyBlue);
                    mainGrid.Children.Add(a);
                    Grid.SetColumn(a, j);
                    Grid.SetRow(a, i);
                    buttons[i, j] = a;
                }
            }
            gameIsLose = false;
            isFlag = false;
            
            regime.Click += Regime_Click;
            
        }

        private void Regime_Click(object sender, RoutedEventArgs e)
        {
            if (!isFlag)
            {
                isFlag = true;
                regime.Header = "Open";
            }
            else
            {
                isFlag = false;
                regime.Header = "Flag";
            }
        }

        private void A_Click(object sender, RoutedEventArgs e)
        {
            Button a = (Button)sender;
            if (a.Content==null&&!isFlag)
            {
                
                int b = matricks[Grid.GetRow(a), Grid.GetColumn(a)];
                

                switch (b)
                {
                    case -1:
                        a.Background = new SolidColorBrush(Colors.Red);
                        a.Content = " ";
                        ShowMines();
                        gameIsLose = true;
                        MessageBox.Show("You die");
                        Restart();
                        break;
                    case -0:
                        a.Content = " ";
                        a.Background = new SolidColorBrush(Colors.LightGray);
                        Open(Grid.GetRow(a), Grid.GetColumn(a));
                        break;
                    case 1:
                        a.Content = b;
                       
                        a.Foreground = new SolidColorBrush(Colors.Blue);
                        a.Background = new SolidColorBrush(Colors.LightGray);
                        break;
                    case 2:
                        a.Content = b;
                        a.Foreground = new SolidColorBrush(Colors.Green);
                        a.Background = new SolidColorBrush(Colors.LightGray);
                        break;
                    case 3:
                        a.Content = b;
                        a.Foreground = new SolidColorBrush(Colors.Red);
                        a.Background = new SolidColorBrush(Colors.LightGray);
                        break;
                    case 4:
                        a.Content = b;
                        a.Foreground = new SolidColorBrush(Colors.DarkBlue);
                        a.Background = new SolidColorBrush(Colors.LightGray);
                        break;
                    case 5:
                        a.Content = b;
                        a.Foreground = new SolidColorBrush(Colors.DarkRed);
                        a.Background = new SolidColorBrush(Colors.LightGray);
                        break;
                    case 6:
                        a.Content = b;
                        a.Foreground = new SolidColorBrush(Colors.CadetBlue);
                        a.Background = new SolidColorBrush(Colors.LightGray);
                        break;
                    case 7:
                        a.Content = b;
                        a.Foreground= new SolidColorBrush(Colors.Black);
                        a.Background = new SolidColorBrush(Colors.LightGray);
                        break;
                    case 8:
                        a.Content = b;
                        a.Foreground = new SolidColorBrush(Colors.DarkGray);
                        a.Background = new SolidColorBrush(Colors.LightGray);
                        break;
                }
                if (!gameIsLose)
                {
                    ChekWin();
                }
            }
            else if (isFlag&&a.Content==null)
            {
                a.Content = "M";
            }
            else if (isFlag&&a.Content=="M")
            {
                a.Content = null;
            }
            
        }
        public void Open(int x,int y)
        {
            for (int i = 0; i < SHeight; i++)
            {
                for (int j = 0; j < SWidth; j++)
                {
                    if ((i-x)*(i-x)<2&&(j-y)*(j-y)<2)
                    {
                        Button a = buttons[i, j];
                        if (a.Content == null)
                        {

                            int b = matricks[Grid.GetRow(a), Grid.GetColumn(a)];
                            
                            
                            switch (b)
                            {
                                
                                case -0:
                                    a.Content = " ";
                                    a.Background = new SolidColorBrush(Colors.LightGray);
                                    Open(Grid.GetRow(a), Grid.GetColumn(a));
                                    break;
                                case 1:
                                    a.Content = b;

                                    a.Foreground = new SolidColorBrush(Colors.Blue);
                                    a.Background = new SolidColorBrush(Colors.LightGray);
                                    break;
                                case 2:
                                    a.Content = b;
                                    a.Foreground = new SolidColorBrush(Colors.Green);
                                    a.Background = new SolidColorBrush(Colors.LightGray);
                                    break;
                                case 3:
                                    a.Content = b;
                                    a.Foreground = new SolidColorBrush(Colors.Red);
                                    a.Background = new SolidColorBrush(Colors.LightGray);
                                    break;
                                case 4:
                                    a.Content = b;
                                    a.Foreground = new SolidColorBrush(Colors.DarkBlue);
                                    a.Background = new SolidColorBrush(Colors.LightGray);
                                    break;
                                case 5:
                                    a.Content = b;
                                    a.Foreground = new SolidColorBrush(Colors.DarkRed);
                                    a.Background = new SolidColorBrush(Colors.LightGray);
                                    break;
                                case 6:
                                    a.Content = b;
                                    a.Foreground = new SolidColorBrush(Colors.CadetBlue);
                                    a.Background = new SolidColorBrush(Colors.LightGray);
                                    break;
                                case 7:
                                    a.Content = b;
                                    a.Foreground = new SolidColorBrush(Colors.Black);
                                    a.Background = new SolidColorBrush(Colors.LightGray);
                                    break;
                                case 8:
                                    a.Content = b;
                                    a.Foreground = new SolidColorBrush(Colors.DarkGray);
                                    a.Background = new SolidColorBrush(Colors.LightGray);
                                    break;
                            }
                        }
                    }
                    
                }
            }
        }
        public void SetMines()
        {
            for (int i = 0; i < mines; i++)
            {
                int x = random.Next(SHeight);
                int y = random.Next(SWidth);
                while (mineMatricks[x,y]==1)
                {
                    x = random.Next(SHeight);
                    y = random.Next(SWidth);
                }
                mineMatricks[x,y] = 1;
            }
        }
        public void SetMatricks()
        {
            mineMatricks = new int[SHeight, SWidth];
            matricks = new int[SHeight, SWidth];
            SetMines();
            for (int i = 1; i < SHeight-1; i++)
            {
                for (int j = 1; j < SWidth-1; j++)
                {
                    if (mineMatricks[i,j]!=1)
                    {
                        matricks[i, j] = (mineMatricks[i - 1, j - 1] + mineMatricks[i - 1, j] + mineMatricks[i - 1, j + 1] +
                                            mineMatricks[i, j - 1] + mineMatricks[i, j + 1] +
                                            mineMatricks[i + 1, j - 1] + mineMatricks[i + 1, j] + mineMatricks[i + 1, j + 1]);
                    }
                    else
                    {
                        matricks[i, j] = -1;
                    }
                    
                }
            }
            for (int i = 1; i < SHeight-1; i++)
            {
                if (mineMatricks[i,0]!=1)
                {
                    matricks[i, 0] = mineMatricks[i, 1] + mineMatricks[i - 1, 0] + mineMatricks[i - 1, 1]
                        + mineMatricks[i + 1, 0] + mineMatricks[i + 1, 1];
                }
                else
                {
                    matricks[i, 0] = -1;
                }
            }
            for (int i = 1; i < SHeight-1; i++)
            {
                if (mineMatricks[i, 9] != 1)
                {
                    matricks[i, SWidth-1] = mineMatricks[i, SWidth-2] + mineMatricks[i - 1, SWidth-1] + mineMatricks[i - 1, SWidth-2]
                        + mineMatricks[i + 1, SWidth-1] + mineMatricks[i + 1, SWidth-2];
                }
                else
                {
                    matricks[i, SWidth - 1] = -1;
                }
            }
            for (int i = 1; i < SWidth-1; i++)
            {
                if (mineMatricks[SHeight-1,i] != 1)
                {
                    matricks[SHeight - 1, i] = mineMatricks[SHeight - 2, i] + mineMatricks[SHeight - 1, i - 1] + mineMatricks[SHeight - 2, i - 1]
                        + mineMatricks[SHeight - 1, i + 1] + mineMatricks[SHeight - 2, i + 1];
                }
                else
                {
                    matricks[SHeight - 1, i] = -1;
                }
            }
            for (int i = 1; i < SWidth-1; i++)
            {
                if (mineMatricks[0, i] != 1)
                {
                    matricks[0, i] = mineMatricks[1, i] + mineMatricks[1, i - 1] + mineMatricks[0, i - 1]
                        + mineMatricks[0, i + 1] + mineMatricks[1, i + 1];
                }
                else
                {
                    matricks[0, i] = -1;
                }
            }
            if (mineMatricks[0,0]!=1)
            {
                matricks[0, 0] = mineMatricks[0, 1] + mineMatricks[1, 0] + mineMatricks[1, 1];
            }
            else
            {
                matricks[0, 0] = -1;
            }
            if (mineMatricks[SHeight-1, SWidth-1] != 1)
            {
                matricks[SHeight-1, SWidth-1] = mineMatricks[SHeight-1,SWidth-2] + mineMatricks[SHeight-2, SWidth-1] + mineMatricks[SHeight-2, SWidth-2];
            }
            else
            {
                matricks[SHeight-1, SWidth-1] = -1;
            }
            if (mineMatricks[0, SWidth-1] != 1)
            {
                matricks[0, SWidth-1] = mineMatricks[0, SWidth-2] + mineMatricks[1, SWidth-1] + mineMatricks[1, SWidth-2];
            }
            else
            {
                matricks[0, SWidth-1] = -1;
            }
            if (mineMatricks[SHeight-1, 0] != 1)
            {
                matricks[SHeight-1, 0] = mineMatricks[SHeight-1, 1] + mineMatricks[SHeight-2, 0] + mineMatricks[SHeight-2, 1];
            }
            else
            {
                matricks[SHeight-1, 0] = -1;
            }
        }
        public void ShowMines()
        {
            for (int i = 0; i < SHeight; i++)
            {
                for (int j = 0; j <SWidth; j++)
                {
                    
                    if (mineMatricks[i,j]==1)
                    {
                        buttons[i,j].Background = new SolidColorBrush(Colors.Red);
                        buttons[i,j].Content = " ";
                    }
                    else if(matricks[i,j]==0)
                    {
                        buttons[i, j].Content = " ";
                    }
                    
                }
            }
        }
        public void ChekWin()
        {
            int open = 0;
            for (int i = 0; i < SHeight; i++)
            {
                for (int j = 0; j <SWidth; j++)
                {
                    if (buttons[i,j].Content!="M"&&buttons[i,j].Content!=null)
                    {
                        open++;
                    }
                }
            }
            if (open==SHeight*SWidth-mines)
            {
                MessageBox.Show("You win");
            }
        }
        public void Restart()
        {
            for (int i = 0; i < SHeight; i++)
            {
                for (int j = 0; j < SWidth; j++)
                {
                    buttons[i, j].Content = null;
                    buttons[i, j].Background = new SolidColorBrush(Colors.LightSkyBlue);
                   
                    mines = 20;
                    gameIsLose = false;
                    SetMatricks();
                }
            }
        }
    }
}
